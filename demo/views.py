from django.shortcuts import render
from django.http import HttpResponse

import base64
# import mathpix
import json
import os
import requests
from django.conf import settings



def index(request):
    # return HttpResponse("Hello, world. You're at the index.")
    return render(request, 'demo/index.html', {})

def save_image(request):
	print('in save image')
	response_data = {}

	if request.POST.get('action') == 'post':
		dataURL = request.POST.get('dataURL')
		x = dataURL.split(",")[1]
		print(x)
		return display_result(request, x)
	else:
		dataURL = ''
		return HttpResponse("<p>no url<p>")

	# return HttpResponse("<h1>response</h1><p>" + str(dataURL) + "<p>")
	# return render(request, 'demo/display_result.html', {})


def display_result(request, url):
	# url = ''
	data = url.replace(' ', '+')
	imgdata = base64.b64decode(data)
	filename = 'demo/static/demo/some_image.png'  # I assume you have a way of picking unique filenames
	if os.path.exists(filename):
		os.remove(filename)
	# else:
		# print("The file does not exist")
	with open(filename, 'wb') as f:
		f.write(imgdata)
	# file=open(settings.STATIC_ROOT+'/'+'some_image.png','w')
	# file.write(imgdata)
	# file.close()


	r = latex({
	    # 'src': mathpix.image_uri('../images/some_image.png'),
	    # 'src': image_uri('some_image.png'),
	    'src': image_uri(filename),
	    'formats': ['latex_simplified']
	})
	
	print(json.dumps(r, indent=4, sort_keys=True))

	# return HttpResponse(r['latex_simplified'])
	# return HttpResponse('ok')
	return render(request, 'demo/display_result.html', { 'latex': r['latex_simplified'] })


env = os.environ

default_headers = {
    'app_id': env.get('APP_ID', 'simran_d_chaudhry_gmail_com_99db0f'),
    'app_key': env.get('APP_KEY', '486f4d7131692b82cd9a'),
    'Content-type': 'application/json'
}

service = 'https://api.mathpix.com/v3/latex'

#
# Return the base64 encoding of an image with the given filename.
#
def image_uri(filename):
    image_data = open(filename, "rb").read()
    return "data:image/jpg;base64," + base64.b64encode(image_data).decode()

#
# Call the Mathpix service with the given arguments, headers, and timeout.
#
def latex(args, headers=default_headers, timeout=30):
    r = requests.post(service,
        data=json.dumps(args), headers=headers, timeout=timeout)
    return json.loads(r.text)
